# Initial TF state setup architecture, to be run before tf-plan and tf-apply
# Once you have the values of TF_STATE_S3_BUCKET and TF_STATE_DYNAMODB_TABLE
# you can add them to the Github "Repository Variables" and they will be used in the Plan and Apply workflows

name: Terraform State Setup

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Generate unique S3 bucket name and create the bucket
        id: create-bucket
        run: |
          if aws s3api list-buckets --query 'Buckets[].Name' | grep -q 'my-terraform-state-'; then
            echo "A bucket with the pattern 'my-terraform-state-' exists, skipping creation."
          else
            echo "No bucket with the pattern 'my-terraform-state-' found, creating a new one."
            UNIQUE_BUCKET_SUFFIX=$(echo $RANDOM | md5sum | head -c 8)
            BUCKET_NAME="my-terraform-state-$UNIQUE_BUCKET_SUFFIX"
            aws s3 mb s3://$BUCKET_NAME --region us-east-1
            echo "TF_STATE_S3_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
          fi

      - name: Create DynamoDB Table for Terraform State Locking
        run: |
          if ! aws dynamodb describe-table --table-name terraform-state-lock 2>&1 | grep -q 'ResourceNotFoundException'; then
            echo "DynamoDB table exists, skipping creation."
          else
            echo "Creating new DynamoDB table"
            aws dynamodb create-table \
            --table-name terraform-state-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
            echo "TF_STATE_DYNAMODB_TABLE=terraform-state-lock" >> $GITHUB_ENV
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: |
          export TF_LOG=DEBUG    
          terraform -chdir=terraform init \
            -backend-config="bucket=${{ env.TF_STATE_S3_BUCKET }}" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}" \
            -backend-config="encrypt=true" \
            -backend-config="key=state/production/terraform.tfstate"

      # Copy the variable names and outputs then add them to Github "Repository Variables"
      # These variables will be used in the Plan and Apply workflows
      - name: Set output values
        run: |
          echo "These are the values you need to add to the Github Repository Variables"
          echo "TF_STATE_S3_BUCKET: ${{ env.TF_STATE_S3_BUCKET }}"
          echo "TF_STATE_DYNAMODB_TABLE: ${{ env.TF_STATE_DYNAMODB_TABLE }}"
