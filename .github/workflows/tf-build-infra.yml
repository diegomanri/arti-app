name: Terraform Plan and Apply

on:
  workflow_dispatch:

jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    environment: production

    env:
      # Any environment variables prefixed with TF_VAR_ are automatically read as Terraform variables.
      TF_VAR_ghcr_token: ${{ secrets.GHCR_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform 1.5
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5

      # Ensure the repository has the variables below in place
      # TODO, make sure env.TF_STATE_S3_BUCKET is the right way to reference the variable
      # perhaps is with vars.VARIABLE_NAME
      # https://docs.github.com/en/actions/learn-github-actions/variables#using-the-vars-context-to-access-configuration-variable-values
      - name: Terraform Init
        run: |
          terraform -chdir=terraform init \
          -backend-config="bucket=${{ vars.TF_STATE_S3_BUCKET }}" \
          -backend-config="dynamodb_table=${{ vars.TF_STATE_DYNAMODB_TABLE }}" \
          -backend-config="region=us-east-1" \
          -backend-config="encrypt=true" \
          -backend-config="key=state/production/terraform.tfstate"

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_prod_django_secret_key: ${{ secrets.PROD_DJANGO_KEY }}
          TF_VAR_db_user: ${{ secrets.DTEST_DB_USER }}
          TF_VAR_db_password: ${{ secrets.DTEST_DB_PASSWORD }}
          TF_VAR_db_host: ${{ vars.DTEST_DB_HOST }}
          TF_VAR_db_name: ${{ vars.DTEST_DB_NAME }}
        run: terraform -chdir=terraform plan -input=false -out=tfplan
        continue-on-error: false

      - name: Upload Terraform Plan as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

  terraform_apply:
    needs: terraform_plan
    if: ${{ needs.terraform_plan.result == 'success' }}
    runs-on: ubuntu-latest
    environment: production

    env:
      # Any environment variables prefixed with TF_VAR_ are automatically read as Terraform variables.
      TF_VAR_ghcr_token: ${{ secrets.GHCR_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform 1.5
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5

      - name: Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="bucket=${{ vars.TF_STATE_S3_BUCKET }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_DYNAMODB_TABLE }}" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true" \
            -backend-config="key=state/production/terraform.tfstate"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform

      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_prod_django_secret_key: ${{ secrets.PROD_DJANGO_KEY }}
          TF_VAR_db_user: ${{ secrets.DTEST_DB_USER }}
          TF_VAR_db_password: ${{ secrets.DTEST_DB_PASSWORD }}
          TF_VAR_db_host: ${{ vars.DTEST_DB_HOST }}
          TF_VAR_db_name: ${{ vars.DTEST_DB_NAME }}
        working-directory: terraform
        run: terraform apply tfplan -auto-approve -input=false
